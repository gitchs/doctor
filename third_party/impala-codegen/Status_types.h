/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Status_TYPES_H
#define Status_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "ErrorCodes_types.h"


namespace impala {

class TStatus;

typedef struct _TStatus__isset {
  _TStatus__isset() : error_msgs(false) {}
  bool error_msgs :1;
} _TStatus__isset;

class TStatus : public virtual ::apache::thrift::TBase {
 public:

  TStatus(const TStatus&);
  TStatus& operator=(const TStatus&);
  TStatus() noexcept
          : status_code(static_cast< ::impala::TErrorCode::type>(0)) {
  }

  virtual ~TStatus() noexcept;
  /**
   * 
   * @see org.apache.impala.thrift.TErrorCode
   */
   ::impala::TErrorCode::type status_code;
  std::vector<std::string>  error_msgs;

  _TStatus__isset __isset;

  void __set_status_code(const  ::impala::TErrorCode::type val);

  void __set_error_msgs(const std::vector<std::string> & val);

  bool operator == (const TStatus & rhs) const
  {
    if (!(status_code == rhs.status_code))
      return false;
    if (!(error_msgs == rhs.error_msgs))
      return false;
    return true;
  }
  bool operator != (const TStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TStatus &a, TStatus &b);

std::ostream& operator<<(std::ostream& out, const TStatus& obj);

} // namespace

#endif
