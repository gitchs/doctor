/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RuntimeProfile_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {

int _kTRuntimeProfileFormatValues[] = {
  TRuntimeProfileFormat::STRING,
  TRuntimeProfileFormat::BASE64,
  TRuntimeProfileFormat::THRIFT,
  TRuntimeProfileFormat::JSON
};
const char* _kTRuntimeProfileFormatNames[] = {
  "STRING",
  "BASE64",
  "THRIFT",
  "JSON"
};
const std::map<int, const char*> _TRuntimeProfileFormat_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTRuntimeProfileFormatValues, _kTRuntimeProfileFormatNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const TRuntimeProfileFormat::type& val) {
  std::map<int, const char*>::const_iterator it = _TRuntimeProfileFormat_VALUES_TO_NAMES.find(val);
  if (it != _TRuntimeProfileFormat_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const TRuntimeProfileFormat::type& val) {
  std::map<int, const char*>::const_iterator it = _TRuntimeProfileFormat_VALUES_TO_NAMES.find(val);
  if (it != _TRuntimeProfileFormat_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


TCounter::~TCounter() noexcept {
}


void TCounter::__set_name(const std::string& val) {
  this->name = val;
}

void TCounter::__set_unit(const  ::impala::TUnit::type val) {
  this->unit = val;
}

void TCounter::__set_value(const int64_t val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const TCounter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TCounter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_unit = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->unit = static_cast< ::impala::TUnit::type>(ecast0);
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TCounter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TCounter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->unit));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCounter &a, TCounter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.unit, b.unit);
  swap(a.value, b.value);
}

TCounter::TCounter(const TCounter& other1) {
  name = other1.name;
  unit = other1.unit;
  value = other1.value;
}
TCounter& TCounter::operator=(const TCounter& other2) {
  name = other2.name;
  unit = other2.unit;
  value = other2.value;
  return *this;
}
void TCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCounter(";
  out << "name=" << to_string(name);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


TAggCounter::~TAggCounter() noexcept {
}


void TAggCounter::__set_name(const std::string& val) {
  this->name = val;
}

void TAggCounter::__set_unit(const  ::impala::TUnit::type val) {
  this->unit = val;
}

void TAggCounter::__set_has_value(const std::vector<bool> & val) {
  this->has_value = val;
}

void TAggCounter::__set_values(const std::vector<int64_t> & val) {
  this->values = val;
}
std::ostream& operator<<(std::ostream& out, const TAggCounter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TAggCounter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_unit = false;
  bool isset_has_value = false;
  bool isset_values = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->unit = static_cast< ::impala::TUnit::type>(ecast3);
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->has_value.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->has_value.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += iprot->readBool(this->has_value[_i8]);
            }
            xfer += iprot->readListEnd();
          }
          isset_has_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size9;
            ::apache::thrift::protocol::TType _etype12;
            xfer += iprot->readListBegin(_etype12, _size9);
            this->values.resize(_size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              xfer += iprot->readI64(this->values[_i13]);
            }
            xfer += iprot->readListEnd();
          }
          isset_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TAggCounter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAggCounter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->unit));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_value", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->has_value.size()));
    std::vector<bool> ::const_iterator _iter14;
    for (_iter14 = this->has_value.begin(); _iter14 != this->has_value.end(); ++_iter14)
    {
      xfer += oprot->writeBool((*_iter14));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->values.size()));
    std::vector<int64_t> ::const_iterator _iter15;
    for (_iter15 = this->values.begin(); _iter15 != this->values.end(); ++_iter15)
    {
      xfer += oprot->writeI64((*_iter15));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TAggCounter &a, TAggCounter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.unit, b.unit);
  swap(a.has_value, b.has_value);
  swap(a.values, b.values);
}

TAggCounter::TAggCounter(const TAggCounter& other16) {
  name = other16.name;
  unit = other16.unit;
  has_value = other16.has_value;
  values = other16.values;
}
TAggCounter& TAggCounter::operator=(const TAggCounter& other17) {
  name = other17.name;
  unit = other17.unit;
  has_value = other17.has_value;
  values = other17.values;
  return *this;
}
void TAggCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAggCounter(";
  out << "name=" << to_string(name);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "has_value=" << to_string(has_value);
  out << ", " << "values=" << to_string(values);
  out << ")";
}


TEventSequence::~TEventSequence() noexcept {
}


void TEventSequence::__set_name(const std::string& val) {
  this->name = val;
}

void TEventSequence::__set_timestamps(const std::vector<int64_t> & val) {
  this->timestamps = val;
}

void TEventSequence::__set_labels(const std::vector<std::string> & val) {
  this->labels = val;
}
std::ostream& operator<<(std::ostream& out, const TEventSequence& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TEventSequence::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_timestamps = false;
  bool isset_labels = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->timestamps.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->timestamps.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readI64(this->timestamps[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          isset_timestamps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->labels.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readListBegin(_etype26, _size23);
            this->labels.resize(_size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              xfer += iprot->readString(this->labels[_i27]);
            }
            xfer += iprot->readListEnd();
          }
          isset_labels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timestamps)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_labels)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TEventSequence::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TEventSequence");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamps", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->timestamps.size()));
    std::vector<int64_t> ::const_iterator _iter28;
    for (_iter28 = this->timestamps.begin(); _iter28 != this->timestamps.end(); ++_iter28)
    {
      xfer += oprot->writeI64((*_iter28));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("labels", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->labels.size()));
    std::vector<std::string> ::const_iterator _iter29;
    for (_iter29 = this->labels.begin(); _iter29 != this->labels.end(); ++_iter29)
    {
      xfer += oprot->writeString((*_iter29));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TEventSequence &a, TEventSequence &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.timestamps, b.timestamps);
  swap(a.labels, b.labels);
}

TEventSequence::TEventSequence(const TEventSequence& other30) {
  name = other30.name;
  timestamps = other30.timestamps;
  labels = other30.labels;
}
TEventSequence& TEventSequence::operator=(const TEventSequence& other31) {
  name = other31.name;
  timestamps = other31.timestamps;
  labels = other31.labels;
  return *this;
}
void TEventSequence::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TEventSequence(";
  out << "name=" << to_string(name);
  out << ", " << "timestamps=" << to_string(timestamps);
  out << ", " << "labels=" << to_string(labels);
  out << ")";
}


TAggEventSequence::~TAggEventSequence() noexcept {
}


void TAggEventSequence::__set_name(const std::string& val) {
  this->name = val;
}

void TAggEventSequence::__set_label_dict(const std::vector<std::string> & val) {
  this->label_dict = val;
}

void TAggEventSequence::__set_label_idxs(const std::vector<std::vector<int32_t> > & val) {
  this->label_idxs = val;
}

void TAggEventSequence::__set_timestamps(const std::vector<std::vector<int64_t> > & val) {
  this->timestamps = val;
}
std::ostream& operator<<(std::ostream& out, const TAggEventSequence& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TAggEventSequence::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_label_dict = false;
  bool isset_label_idxs = false;
  bool isset_timestamps = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->label_dict.clear();
            uint32_t _size32;
            ::apache::thrift::protocol::TType _etype35;
            xfer += iprot->readListBegin(_etype35, _size32);
            this->label_dict.resize(_size32);
            uint32_t _i36;
            for (_i36 = 0; _i36 < _size32; ++_i36)
            {
              xfer += iprot->readString(this->label_dict[_i36]);
            }
            xfer += iprot->readListEnd();
          }
          isset_label_dict = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->label_idxs.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->label_idxs.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              {
                this->label_idxs[_i41].clear();
                uint32_t _size42;
                ::apache::thrift::protocol::TType _etype45;
                xfer += iprot->readListBegin(_etype45, _size42);
                this->label_idxs[_i41].resize(_size42);
                uint32_t _i46;
                for (_i46 = 0; _i46 < _size42; ++_i46)
                {
                  xfer += iprot->readI32(this->label_idxs[_i41][_i46]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          isset_label_idxs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->timestamps.clear();
            uint32_t _size47;
            ::apache::thrift::protocol::TType _etype50;
            xfer += iprot->readListBegin(_etype50, _size47);
            this->timestamps.resize(_size47);
            uint32_t _i51;
            for (_i51 = 0; _i51 < _size47; ++_i51)
            {
              {
                this->timestamps[_i51].clear();
                uint32_t _size52;
                ::apache::thrift::protocol::TType _etype55;
                xfer += iprot->readListBegin(_etype55, _size52);
                this->timestamps[_i51].resize(_size52);
                uint32_t _i56;
                for (_i56 = 0; _i56 < _size52; ++_i56)
                {
                  xfer += iprot->readI64(this->timestamps[_i51][_i56]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          isset_timestamps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_label_dict)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_label_idxs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timestamps)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TAggEventSequence::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAggEventSequence");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label_dict", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->label_dict.size()));
    std::vector<std::string> ::const_iterator _iter57;
    for (_iter57 = this->label_dict.begin(); _iter57 != this->label_dict.end(); ++_iter57)
    {
      xfer += oprot->writeString((*_iter57));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label_idxs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->label_idxs.size()));
    std::vector<std::vector<int32_t> > ::const_iterator _iter58;
    for (_iter58 = this->label_idxs.begin(); _iter58 != this->label_idxs.end(); ++_iter58)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*_iter58).size()));
        std::vector<int32_t> ::const_iterator _iter59;
        for (_iter59 = (*_iter58).begin(); _iter59 != (*_iter58).end(); ++_iter59)
        {
          xfer += oprot->writeI32((*_iter59));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->timestamps.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter60;
    for (_iter60 = this->timestamps.begin(); _iter60 != this->timestamps.end(); ++_iter60)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter60).size()));
        std::vector<int64_t> ::const_iterator _iter61;
        for (_iter61 = (*_iter60).begin(); _iter61 != (*_iter60).end(); ++_iter61)
        {
          xfer += oprot->writeI64((*_iter61));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TAggEventSequence &a, TAggEventSequence &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.label_dict, b.label_dict);
  swap(a.label_idxs, b.label_idxs);
  swap(a.timestamps, b.timestamps);
}

TAggEventSequence::TAggEventSequence(const TAggEventSequence& other62) {
  name = other62.name;
  label_dict = other62.label_dict;
  label_idxs = other62.label_idxs;
  timestamps = other62.timestamps;
}
TAggEventSequence& TAggEventSequence::operator=(const TAggEventSequence& other63) {
  name = other63.name;
  label_dict = other63.label_dict;
  label_idxs = other63.label_idxs;
  timestamps = other63.timestamps;
  return *this;
}
void TAggEventSequence::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAggEventSequence(";
  out << "name=" << to_string(name);
  out << ", " << "label_dict=" << to_string(label_dict);
  out << ", " << "label_idxs=" << to_string(label_idxs);
  out << ", " << "timestamps=" << to_string(timestamps);
  out << ")";
}


TTimeSeriesCounter::~TTimeSeriesCounter() noexcept {
}


void TTimeSeriesCounter::__set_name(const std::string& val) {
  this->name = val;
}

void TTimeSeriesCounter::__set_unit(const  ::impala::TUnit::type val) {
  this->unit = val;
}

void TTimeSeriesCounter::__set_period_ms(const int32_t val) {
  this->period_ms = val;
}

void TTimeSeriesCounter::__set_values(const std::vector<int64_t> & val) {
  this->values = val;
}

void TTimeSeriesCounter::__set_start_index(const int64_t val) {
  this->start_index = val;
__isset.start_index = true;
}
std::ostream& operator<<(std::ostream& out, const TTimeSeriesCounter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TTimeSeriesCounter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_unit = false;
  bool isset_period_ms = false;
  bool isset_values = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast64;
          xfer += iprot->readI32(ecast64);
          this->unit = static_cast< ::impala::TUnit::type>(ecast64);
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->period_ms);
          isset_period_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->values.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += iprot->readI64(this->values[_i69]);
            }
            xfer += iprot->readListEnd();
          }
          isset_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start_index);
          this->__isset.start_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_period_ms)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TTimeSeriesCounter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TTimeSeriesCounter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->unit));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("period_ms", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->period_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->values.size()));
    std::vector<int64_t> ::const_iterator _iter70;
    for (_iter70 = this->values.begin(); _iter70 != this->values.end(); ++_iter70)
    {
      xfer += oprot->writeI64((*_iter70));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.start_index) {
    xfer += oprot->writeFieldBegin("start_index", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->start_index);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TTimeSeriesCounter &a, TTimeSeriesCounter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.unit, b.unit);
  swap(a.period_ms, b.period_ms);
  swap(a.values, b.values);
  swap(a.start_index, b.start_index);
  swap(a.__isset, b.__isset);
}

TTimeSeriesCounter::TTimeSeriesCounter(const TTimeSeriesCounter& other71) {
  name = other71.name;
  unit = other71.unit;
  period_ms = other71.period_ms;
  values = other71.values;
  start_index = other71.start_index;
  __isset = other71.__isset;
}
TTimeSeriesCounter& TTimeSeriesCounter::operator=(const TTimeSeriesCounter& other72) {
  name = other72.name;
  unit = other72.unit;
  period_ms = other72.period_ms;
  values = other72.values;
  start_index = other72.start_index;
  __isset = other72.__isset;
  return *this;
}
void TTimeSeriesCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTimeSeriesCounter(";
  out << "name=" << to_string(name);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "period_ms=" << to_string(period_ms);
  out << ", " << "values=" << to_string(values);
  out << ", " << "start_index="; (__isset.start_index ? (out << to_string(start_index)) : (out << "<null>"));
  out << ")";
}


TAggTimeSeriesCounter::~TAggTimeSeriesCounter() noexcept {
}


void TAggTimeSeriesCounter::__set_name(const std::string& val) {
  this->name = val;
}

void TAggTimeSeriesCounter::__set_unit(const  ::impala::TUnit::type val) {
  this->unit = val;
}

void TAggTimeSeriesCounter::__set_period_ms(const std::vector<int32_t> & val) {
  this->period_ms = val;
}

void TAggTimeSeriesCounter::__set_values(const std::vector<std::vector<int64_t> > & val) {
  this->values = val;
}

void TAggTimeSeriesCounter::__set_start_index(const std::vector<int64_t> & val) {
  this->start_index = val;
}
std::ostream& operator<<(std::ostream& out, const TAggTimeSeriesCounter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TAggTimeSeriesCounter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_unit = false;
  bool isset_period_ms = false;
  bool isset_values = false;
  bool isset_start_index = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast73;
          xfer += iprot->readI32(ecast73);
          this->unit = static_cast< ::impala::TUnit::type>(ecast73);
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->period_ms.clear();
            uint32_t _size74;
            ::apache::thrift::protocol::TType _etype77;
            xfer += iprot->readListBegin(_etype77, _size74);
            this->period_ms.resize(_size74);
            uint32_t _i78;
            for (_i78 = 0; _i78 < _size74; ++_i78)
            {
              xfer += iprot->readI32(this->period_ms[_i78]);
            }
            xfer += iprot->readListEnd();
          }
          isset_period_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size79;
            ::apache::thrift::protocol::TType _etype82;
            xfer += iprot->readListBegin(_etype82, _size79);
            this->values.resize(_size79);
            uint32_t _i83;
            for (_i83 = 0; _i83 < _size79; ++_i83)
            {
              {
                this->values[_i83].clear();
                uint32_t _size84;
                ::apache::thrift::protocol::TType _etype87;
                xfer += iprot->readListBegin(_etype87, _size84);
                this->values[_i83].resize(_size84);
                uint32_t _i88;
                for (_i88 = 0; _i88 < _size84; ++_i88)
                {
                  xfer += iprot->readI64(this->values[_i83][_i88]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          isset_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->start_index.clear();
            uint32_t _size89;
            ::apache::thrift::protocol::TType _etype92;
            xfer += iprot->readListBegin(_etype92, _size89);
            this->start_index.resize(_size89);
            uint32_t _i93;
            for (_i93 = 0; _i93 < _size89; ++_i93)
            {
              xfer += iprot->readI64(this->start_index[_i93]);
            }
            xfer += iprot->readListEnd();
          }
          isset_start_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_period_ms)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_index)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TAggTimeSeriesCounter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAggTimeSeriesCounter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->unit));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("period_ms", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->period_ms.size()));
    std::vector<int32_t> ::const_iterator _iter94;
    for (_iter94 = this->period_ms.begin(); _iter94 != this->period_ms.end(); ++_iter94)
    {
      xfer += oprot->writeI32((*_iter94));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->values.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter95;
    for (_iter95 = this->values.begin(); _iter95 != this->values.end(); ++_iter95)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter95).size()));
        std::vector<int64_t> ::const_iterator _iter96;
        for (_iter96 = (*_iter95).begin(); _iter96 != (*_iter95).end(); ++_iter96)
        {
          xfer += oprot->writeI64((*_iter96));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_index", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->start_index.size()));
    std::vector<int64_t> ::const_iterator _iter97;
    for (_iter97 = this->start_index.begin(); _iter97 != this->start_index.end(); ++_iter97)
    {
      xfer += oprot->writeI64((*_iter97));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TAggTimeSeriesCounter &a, TAggTimeSeriesCounter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.unit, b.unit);
  swap(a.period_ms, b.period_ms);
  swap(a.values, b.values);
  swap(a.start_index, b.start_index);
}

TAggTimeSeriesCounter::TAggTimeSeriesCounter(const TAggTimeSeriesCounter& other98) {
  name = other98.name;
  unit = other98.unit;
  period_ms = other98.period_ms;
  values = other98.values;
  start_index = other98.start_index;
}
TAggTimeSeriesCounter& TAggTimeSeriesCounter::operator=(const TAggTimeSeriesCounter& other99) {
  name = other99.name;
  unit = other99.unit;
  period_ms = other99.period_ms;
  values = other99.values;
  start_index = other99.start_index;
  return *this;
}
void TAggTimeSeriesCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAggTimeSeriesCounter(";
  out << "name=" << to_string(name);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "period_ms=" << to_string(period_ms);
  out << ", " << "values=" << to_string(values);
  out << ", " << "start_index=" << to_string(start_index);
  out << ")";
}


TSummaryStatsCounter::~TSummaryStatsCounter() noexcept {
}


void TSummaryStatsCounter::__set_name(const std::string& val) {
  this->name = val;
}

void TSummaryStatsCounter::__set_unit(const  ::impala::TUnit::type val) {
  this->unit = val;
}

void TSummaryStatsCounter::__set_sum(const int64_t val) {
  this->sum = val;
}

void TSummaryStatsCounter::__set_total_num_values(const int64_t val) {
  this->total_num_values = val;
}

void TSummaryStatsCounter::__set_min_value(const int64_t val) {
  this->min_value = val;
}

void TSummaryStatsCounter::__set_max_value(const int64_t val) {
  this->max_value = val;
}
std::ostream& operator<<(std::ostream& out, const TSummaryStatsCounter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TSummaryStatsCounter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_unit = false;
  bool isset_sum = false;
  bool isset_total_num_values = false;
  bool isset_min_value = false;
  bool isset_max_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast100;
          xfer += iprot->readI32(ecast100);
          this->unit = static_cast< ::impala::TUnit::type>(ecast100);
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sum);
          isset_sum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->total_num_values);
          isset_total_num_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->min_value);
          isset_min_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max_value);
          isset_max_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_total_num_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_min_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TSummaryStatsCounter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TSummaryStatsCounter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->unit));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sum", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->sum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_num_values", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->total_num_values);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_value", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->min_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_value", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->max_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSummaryStatsCounter &a, TSummaryStatsCounter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.unit, b.unit);
  swap(a.sum, b.sum);
  swap(a.total_num_values, b.total_num_values);
  swap(a.min_value, b.min_value);
  swap(a.max_value, b.max_value);
}

TSummaryStatsCounter::TSummaryStatsCounter(const TSummaryStatsCounter& other101) {
  name = other101.name;
  unit = other101.unit;
  sum = other101.sum;
  total_num_values = other101.total_num_values;
  min_value = other101.min_value;
  max_value = other101.max_value;
}
TSummaryStatsCounter& TSummaryStatsCounter::operator=(const TSummaryStatsCounter& other102) {
  name = other102.name;
  unit = other102.unit;
  sum = other102.sum;
  total_num_values = other102.total_num_values;
  min_value = other102.min_value;
  max_value = other102.max_value;
  return *this;
}
void TSummaryStatsCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSummaryStatsCounter(";
  out << "name=" << to_string(name);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "sum=" << to_string(sum);
  out << ", " << "total_num_values=" << to_string(total_num_values);
  out << ", " << "min_value=" << to_string(min_value);
  out << ", " << "max_value=" << to_string(max_value);
  out << ")";
}


TAggSummaryStatsCounter::~TAggSummaryStatsCounter() noexcept {
}


void TAggSummaryStatsCounter::__set_name(const std::string& val) {
  this->name = val;
}

void TAggSummaryStatsCounter::__set_unit(const  ::impala::TUnit::type val) {
  this->unit = val;
}

void TAggSummaryStatsCounter::__set_has_value(const std::vector<bool> & val) {
  this->has_value = val;
}

void TAggSummaryStatsCounter::__set_sum(const std::vector<int64_t> & val) {
  this->sum = val;
}

void TAggSummaryStatsCounter::__set_total_num_values(const std::vector<int64_t> & val) {
  this->total_num_values = val;
}

void TAggSummaryStatsCounter::__set_min_value(const std::vector<int64_t> & val) {
  this->min_value = val;
}

void TAggSummaryStatsCounter::__set_max_value(const std::vector<int64_t> & val) {
  this->max_value = val;
}
std::ostream& operator<<(std::ostream& out, const TAggSummaryStatsCounter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TAggSummaryStatsCounter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_unit = false;
  bool isset_has_value = false;
  bool isset_sum = false;
  bool isset_total_num_values = false;
  bool isset_min_value = false;
  bool isset_max_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast103;
          xfer += iprot->readI32(ecast103);
          this->unit = static_cast< ::impala::TUnit::type>(ecast103);
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->has_value.clear();
            uint32_t _size104;
            ::apache::thrift::protocol::TType _etype107;
            xfer += iprot->readListBegin(_etype107, _size104);
            this->has_value.resize(_size104);
            uint32_t _i108;
            for (_i108 = 0; _i108 < _size104; ++_i108)
            {
              xfer += iprot->readBool(this->has_value[_i108]);
            }
            xfer += iprot->readListEnd();
          }
          isset_has_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sum.clear();
            uint32_t _size109;
            ::apache::thrift::protocol::TType _etype112;
            xfer += iprot->readListBegin(_etype112, _size109);
            this->sum.resize(_size109);
            uint32_t _i113;
            for (_i113 = 0; _i113 < _size109; ++_i113)
            {
              xfer += iprot->readI64(this->sum[_i113]);
            }
            xfer += iprot->readListEnd();
          }
          isset_sum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->total_num_values.clear();
            uint32_t _size114;
            ::apache::thrift::protocol::TType _etype117;
            xfer += iprot->readListBegin(_etype117, _size114);
            this->total_num_values.resize(_size114);
            uint32_t _i118;
            for (_i118 = 0; _i118 < _size114; ++_i118)
            {
              xfer += iprot->readI64(this->total_num_values[_i118]);
            }
            xfer += iprot->readListEnd();
          }
          isset_total_num_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->min_value.clear();
            uint32_t _size119;
            ::apache::thrift::protocol::TType _etype122;
            xfer += iprot->readListBegin(_etype122, _size119);
            this->min_value.resize(_size119);
            uint32_t _i123;
            for (_i123 = 0; _i123 < _size119; ++_i123)
            {
              xfer += iprot->readI64(this->min_value[_i123]);
            }
            xfer += iprot->readListEnd();
          }
          isset_min_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->max_value.clear();
            uint32_t _size124;
            ::apache::thrift::protocol::TType _etype127;
            xfer += iprot->readListBegin(_etype127, _size124);
            this->max_value.resize(_size124);
            uint32_t _i128;
            for (_i128 = 0; _i128 < _size124; ++_i128)
            {
              xfer += iprot->readI64(this->max_value[_i128]);
            }
            xfer += iprot->readListEnd();
          }
          isset_max_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_total_num_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_min_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TAggSummaryStatsCounter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAggSummaryStatsCounter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->unit));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_value", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->has_value.size()));
    std::vector<bool> ::const_iterator _iter129;
    for (_iter129 = this->has_value.begin(); _iter129 != this->has_value.end(); ++_iter129)
    {
      xfer += oprot->writeBool((*_iter129));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sum", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->sum.size()));
    std::vector<int64_t> ::const_iterator _iter130;
    for (_iter130 = this->sum.begin(); _iter130 != this->sum.end(); ++_iter130)
    {
      xfer += oprot->writeI64((*_iter130));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_num_values", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->total_num_values.size()));
    std::vector<int64_t> ::const_iterator _iter131;
    for (_iter131 = this->total_num_values.begin(); _iter131 != this->total_num_values.end(); ++_iter131)
    {
      xfer += oprot->writeI64((*_iter131));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_value", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->min_value.size()));
    std::vector<int64_t> ::const_iterator _iter132;
    for (_iter132 = this->min_value.begin(); _iter132 != this->min_value.end(); ++_iter132)
    {
      xfer += oprot->writeI64((*_iter132));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_value", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->max_value.size()));
    std::vector<int64_t> ::const_iterator _iter133;
    for (_iter133 = this->max_value.begin(); _iter133 != this->max_value.end(); ++_iter133)
    {
      xfer += oprot->writeI64((*_iter133));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TAggSummaryStatsCounter &a, TAggSummaryStatsCounter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.unit, b.unit);
  swap(a.has_value, b.has_value);
  swap(a.sum, b.sum);
  swap(a.total_num_values, b.total_num_values);
  swap(a.min_value, b.min_value);
  swap(a.max_value, b.max_value);
}

TAggSummaryStatsCounter::TAggSummaryStatsCounter(const TAggSummaryStatsCounter& other134) {
  name = other134.name;
  unit = other134.unit;
  has_value = other134.has_value;
  sum = other134.sum;
  total_num_values = other134.total_num_values;
  min_value = other134.min_value;
  max_value = other134.max_value;
}
TAggSummaryStatsCounter& TAggSummaryStatsCounter::operator=(const TAggSummaryStatsCounter& other135) {
  name = other135.name;
  unit = other135.unit;
  has_value = other135.has_value;
  sum = other135.sum;
  total_num_values = other135.total_num_values;
  min_value = other135.min_value;
  max_value = other135.max_value;
  return *this;
}
void TAggSummaryStatsCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAggSummaryStatsCounter(";
  out << "name=" << to_string(name);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "has_value=" << to_string(has_value);
  out << ", " << "sum=" << to_string(sum);
  out << ", " << "total_num_values=" << to_string(total_num_values);
  out << ", " << "min_value=" << to_string(min_value);
  out << ", " << "max_value=" << to_string(max_value);
  out << ")";
}


TRuntimeProfileNodeMetadata::~TRuntimeProfileNodeMetadata() noexcept {
}


void TRuntimeProfileNodeMetadata::__set_plan_node_id(const  ::impala::TPlanNodeId val) {
  this->plan_node_id = val;
__isset.plan_node_id = true;
}

void TRuntimeProfileNodeMetadata::__set_data_sink_id(const  ::impala::TDataSinkId val) {
  this->data_sink_id = val;
__isset.data_sink_id = true;
}
std::ostream& operator<<(std::ostream& out, const TRuntimeProfileNodeMetadata& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TRuntimeProfileNodeMetadata::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->plan_node_id);
          this->__isset.plan_node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->data_sink_id);
          this->__isset.data_sink_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TRuntimeProfileNodeMetadata::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TRuntimeProfileNodeMetadata");

  if (this->__isset.plan_node_id) {
    xfer += oprot->writeFieldBegin("plan_node_id", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->plan_node_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.data_sink_id) {
    xfer += oprot->writeFieldBegin("data_sink_id", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->data_sink_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRuntimeProfileNodeMetadata &a, TRuntimeProfileNodeMetadata &b) {
  using ::std::swap;
  swap(a.plan_node_id, b.plan_node_id);
  swap(a.data_sink_id, b.data_sink_id);
  swap(a.__isset, b.__isset);
}

TRuntimeProfileNodeMetadata::TRuntimeProfileNodeMetadata(const TRuntimeProfileNodeMetadata& other136) noexcept {
  plan_node_id = other136.plan_node_id;
  data_sink_id = other136.data_sink_id;
  __isset = other136.__isset;
}
TRuntimeProfileNodeMetadata& TRuntimeProfileNodeMetadata::operator=(const TRuntimeProfileNodeMetadata& other137) noexcept {
  plan_node_id = other137.plan_node_id;
  data_sink_id = other137.data_sink_id;
  __isset = other137.__isset;
  return *this;
}
void TRuntimeProfileNodeMetadata::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRuntimeProfileNodeMetadata(";
  out << "plan_node_id="; (__isset.plan_node_id ? (out << to_string(plan_node_id)) : (out << "<null>"));
  out << ", " << "data_sink_id="; (__isset.data_sink_id ? (out << to_string(data_sink_id)) : (out << "<null>"));
  out << ")";
}


TAggregatedRuntimeProfileNode::~TAggregatedRuntimeProfileNode() noexcept {
}


void TAggregatedRuntimeProfileNode::__set_num_instances(const int32_t val) {
  this->num_instances = val;
__isset.num_instances = true;
}

void TAggregatedRuntimeProfileNode::__set_input_profiles(const std::vector<std::string> & val) {
  this->input_profiles = val;
__isset.input_profiles = true;
}

void TAggregatedRuntimeProfileNode::__set_counters(const std::vector<TAggCounter> & val) {
  this->counters = val;
__isset.counters = true;
}

void TAggregatedRuntimeProfileNode::__set_info_strings(const std::map<std::string, std::map<std::string, std::vector<int32_t> > > & val) {
  this->info_strings = val;
__isset.info_strings = true;
}

void TAggregatedRuntimeProfileNode::__set_summary_stats_counters(const std::vector<TAggSummaryStatsCounter> & val) {
  this->summary_stats_counters = val;
__isset.summary_stats_counters = true;
}

void TAggregatedRuntimeProfileNode::__set_event_sequences(const std::vector<TAggEventSequence> & val) {
  this->event_sequences = val;
__isset.event_sequences = true;
}

void TAggregatedRuntimeProfileNode::__set_time_series_counters(const std::vector<TAggTimeSeriesCounter> & val) {
  this->time_series_counters = val;
__isset.time_series_counters = true;
}
std::ostream& operator<<(std::ostream& out, const TAggregatedRuntimeProfileNode& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TAggregatedRuntimeProfileNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_instances);
          this->__isset.num_instances = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->input_profiles.clear();
            uint32_t _size138;
            ::apache::thrift::protocol::TType _etype141;
            xfer += iprot->readListBegin(_etype141, _size138);
            this->input_profiles.resize(_size138);
            uint32_t _i142;
            for (_i142 = 0; _i142 < _size138; ++_i142)
            {
              xfer += iprot->readString(this->input_profiles[_i142]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.input_profiles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counters.clear();
            uint32_t _size143;
            ::apache::thrift::protocol::TType _etype146;
            xfer += iprot->readListBegin(_etype146, _size143);
            this->counters.resize(_size143);
            uint32_t _i147;
            for (_i147 = 0; _i147 < _size143; ++_i147)
            {
              xfer += this->counters[_i147].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->info_strings.clear();
            uint32_t _size148;
            ::apache::thrift::protocol::TType _ktype149;
            ::apache::thrift::protocol::TType _vtype150;
            xfer += iprot->readMapBegin(_ktype149, _vtype150, _size148);
            uint32_t _i152;
            for (_i152 = 0; _i152 < _size148; ++_i152)
            {
              std::string _key153;
              xfer += iprot->readString(_key153);
              std::map<std::string, std::vector<int32_t> > & _val154 = this->info_strings[_key153];
              {
                _val154.clear();
                uint32_t _size155;
                ::apache::thrift::protocol::TType _ktype156;
                ::apache::thrift::protocol::TType _vtype157;
                xfer += iprot->readMapBegin(_ktype156, _vtype157, _size155);
                uint32_t _i159;
                for (_i159 = 0; _i159 < _size155; ++_i159)
                {
                  std::string _key160;
                  xfer += iprot->readString(_key160);
                  std::vector<int32_t> & _val161 = _val154[_key160];
                  {
                    _val161.clear();
                    uint32_t _size162;
                    ::apache::thrift::protocol::TType _etype165;
                    xfer += iprot->readListBegin(_etype165, _size162);
                    _val161.resize(_size162);
                    uint32_t _i166;
                    for (_i166 = 0; _i166 < _size162; ++_i166)
                    {
                      xfer += iprot->readI32(_val161[_i166]);
                    }
                    xfer += iprot->readListEnd();
                  }
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.info_strings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->summary_stats_counters.clear();
            uint32_t _size167;
            ::apache::thrift::protocol::TType _etype170;
            xfer += iprot->readListBegin(_etype170, _size167);
            this->summary_stats_counters.resize(_size167);
            uint32_t _i171;
            for (_i171 = 0; _i171 < _size167; ++_i171)
            {
              xfer += this->summary_stats_counters[_i171].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.summary_stats_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->event_sequences.clear();
            uint32_t _size172;
            ::apache::thrift::protocol::TType _etype175;
            xfer += iprot->readListBegin(_etype175, _size172);
            this->event_sequences.resize(_size172);
            uint32_t _i176;
            for (_i176 = 0; _i176 < _size172; ++_i176)
            {
              xfer += this->event_sequences[_i176].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.event_sequences = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->time_series_counters.clear();
            uint32_t _size177;
            ::apache::thrift::protocol::TType _etype180;
            xfer += iprot->readListBegin(_etype180, _size177);
            this->time_series_counters.resize(_size177);
            uint32_t _i181;
            for (_i181 = 0; _i181 < _size177; ++_i181)
            {
              xfer += this->time_series_counters[_i181].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.time_series_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TAggregatedRuntimeProfileNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAggregatedRuntimeProfileNode");

  if (this->__isset.num_instances) {
    xfer += oprot->writeFieldBegin("num_instances", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->num_instances);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.input_profiles) {
    xfer += oprot->writeFieldBegin("input_profiles", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->input_profiles.size()));
      std::vector<std::string> ::const_iterator _iter182;
      for (_iter182 = this->input_profiles.begin(); _iter182 != this->input_profiles.end(); ++_iter182)
      {
        xfer += oprot->writeString((*_iter182));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.counters) {
    xfer += oprot->writeFieldBegin("counters", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->counters.size()));
      std::vector<TAggCounter> ::const_iterator _iter183;
      for (_iter183 = this->counters.begin(); _iter183 != this->counters.end(); ++_iter183)
      {
        xfer += (*_iter183).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.info_strings) {
    xfer += oprot->writeFieldBegin("info_strings", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->info_strings.size()));
      std::map<std::string, std::map<std::string, std::vector<int32_t> > > ::const_iterator _iter184;
      for (_iter184 = this->info_strings.begin(); _iter184 != this->info_strings.end(); ++_iter184)
      {
        xfer += oprot->writeString(_iter184->first);
        {
          xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(_iter184->second.size()));
          std::map<std::string, std::vector<int32_t> > ::const_iterator _iter185;
          for (_iter185 = _iter184->second.begin(); _iter185 != _iter184->second.end(); ++_iter185)
          {
            xfer += oprot->writeString(_iter185->first);
            {
              xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(_iter185->second.size()));
              std::vector<int32_t> ::const_iterator _iter186;
              for (_iter186 = _iter185->second.begin(); _iter186 != _iter185->second.end(); ++_iter186)
              {
                xfer += oprot->writeI32((*_iter186));
              }
              xfer += oprot->writeListEnd();
            }
          }
          xfer += oprot->writeMapEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.summary_stats_counters) {
    xfer += oprot->writeFieldBegin("summary_stats_counters", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->summary_stats_counters.size()));
      std::vector<TAggSummaryStatsCounter> ::const_iterator _iter187;
      for (_iter187 = this->summary_stats_counters.begin(); _iter187 != this->summary_stats_counters.end(); ++_iter187)
      {
        xfer += (*_iter187).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.event_sequences) {
    xfer += oprot->writeFieldBegin("event_sequences", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->event_sequences.size()));
      std::vector<TAggEventSequence> ::const_iterator _iter188;
      for (_iter188 = this->event_sequences.begin(); _iter188 != this->event_sequences.end(); ++_iter188)
      {
        xfer += (*_iter188).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.time_series_counters) {
    xfer += oprot->writeFieldBegin("time_series_counters", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->time_series_counters.size()));
      std::vector<TAggTimeSeriesCounter> ::const_iterator _iter189;
      for (_iter189 = this->time_series_counters.begin(); _iter189 != this->time_series_counters.end(); ++_iter189)
      {
        xfer += (*_iter189).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TAggregatedRuntimeProfileNode &a, TAggregatedRuntimeProfileNode &b) {
  using ::std::swap;
  swap(a.num_instances, b.num_instances);
  swap(a.input_profiles, b.input_profiles);
  swap(a.counters, b.counters);
  swap(a.info_strings, b.info_strings);
  swap(a.summary_stats_counters, b.summary_stats_counters);
  swap(a.event_sequences, b.event_sequences);
  swap(a.time_series_counters, b.time_series_counters);
  swap(a.__isset, b.__isset);
}

TAggregatedRuntimeProfileNode::TAggregatedRuntimeProfileNode(const TAggregatedRuntimeProfileNode& other190) {
  num_instances = other190.num_instances;
  input_profiles = other190.input_profiles;
  counters = other190.counters;
  info_strings = other190.info_strings;
  summary_stats_counters = other190.summary_stats_counters;
  event_sequences = other190.event_sequences;
  time_series_counters = other190.time_series_counters;
  __isset = other190.__isset;
}
TAggregatedRuntimeProfileNode& TAggregatedRuntimeProfileNode::operator=(const TAggregatedRuntimeProfileNode& other191) {
  num_instances = other191.num_instances;
  input_profiles = other191.input_profiles;
  counters = other191.counters;
  info_strings = other191.info_strings;
  summary_stats_counters = other191.summary_stats_counters;
  event_sequences = other191.event_sequences;
  time_series_counters = other191.time_series_counters;
  __isset = other191.__isset;
  return *this;
}
void TAggregatedRuntimeProfileNode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAggregatedRuntimeProfileNode(";
  out << "num_instances="; (__isset.num_instances ? (out << to_string(num_instances)) : (out << "<null>"));
  out << ", " << "input_profiles="; (__isset.input_profiles ? (out << to_string(input_profiles)) : (out << "<null>"));
  out << ", " << "counters="; (__isset.counters ? (out << to_string(counters)) : (out << "<null>"));
  out << ", " << "info_strings="; (__isset.info_strings ? (out << to_string(info_strings)) : (out << "<null>"));
  out << ", " << "summary_stats_counters="; (__isset.summary_stats_counters ? (out << to_string(summary_stats_counters)) : (out << "<null>"));
  out << ", " << "event_sequences="; (__isset.event_sequences ? (out << to_string(event_sequences)) : (out << "<null>"));
  out << ", " << "time_series_counters="; (__isset.time_series_counters ? (out << to_string(time_series_counters)) : (out << "<null>"));
  out << ")";
}


TRuntimeProfileNode::~TRuntimeProfileNode() noexcept {
}


void TRuntimeProfileNode::__set_name(const std::string& val) {
  this->name = val;
}

void TRuntimeProfileNode::__set_num_children(const int32_t val) {
  this->num_children = val;
}

void TRuntimeProfileNode::__set_counters(const std::vector<TCounter> & val) {
  this->counters = val;
}

void TRuntimeProfileNode::__set_metadata(const int64_t val) {
  this->metadata = val;
}

void TRuntimeProfileNode::__set_indent(const bool val) {
  this->indent = val;
}

void TRuntimeProfileNode::__set_info_strings(const std::map<std::string, std::string> & val) {
  this->info_strings = val;
}

void TRuntimeProfileNode::__set_info_strings_display_order(const std::vector<std::string> & val) {
  this->info_strings_display_order = val;
}

void TRuntimeProfileNode::__set_child_counters_map(const std::map<std::string, std::set<std::string> > & val) {
  this->child_counters_map = val;
}

void TRuntimeProfileNode::__set_event_sequences(const std::vector<TEventSequence> & val) {
  this->event_sequences = val;
__isset.event_sequences = true;
}

void TRuntimeProfileNode::__set_time_series_counters(const std::vector<TTimeSeriesCounter> & val) {
  this->time_series_counters = val;
__isset.time_series_counters = true;
}

void TRuntimeProfileNode::__set_summary_stats_counters(const std::vector<TSummaryStatsCounter> & val) {
  this->summary_stats_counters = val;
__isset.summary_stats_counters = true;
}

void TRuntimeProfileNode::__set_node_metadata(const TRuntimeProfileNodeMetadata& val) {
  this->node_metadata = val;
__isset.node_metadata = true;
}

void TRuntimeProfileNode::__set_aggregated(const TAggregatedRuntimeProfileNode& val) {
  this->aggregated = val;
__isset.aggregated = true;
}
std::ostream& operator<<(std::ostream& out, const TRuntimeProfileNode& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TRuntimeProfileNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_num_children = false;
  bool isset_counters = false;
  bool isset_metadata = false;
  bool isset_indent = false;
  bool isset_info_strings = false;
  bool isset_info_strings_display_order = false;
  bool isset_child_counters_map = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_children);
          isset_num_children = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counters.clear();
            uint32_t _size192;
            ::apache::thrift::protocol::TType _etype195;
            xfer += iprot->readListBegin(_etype195, _size192);
            this->counters.resize(_size192);
            uint32_t _i196;
            for (_i196 = 0; _i196 < _size192; ++_i196)
            {
              xfer += this->counters[_i196].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->metadata);
          isset_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->indent);
          isset_indent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->info_strings.clear();
            uint32_t _size197;
            ::apache::thrift::protocol::TType _ktype198;
            ::apache::thrift::protocol::TType _vtype199;
            xfer += iprot->readMapBegin(_ktype198, _vtype199, _size197);
            uint32_t _i201;
            for (_i201 = 0; _i201 < _size197; ++_i201)
            {
              std::string _key202;
              xfer += iprot->readString(_key202);
              std::string& _val203 = this->info_strings[_key202];
              xfer += iprot->readString(_val203);
            }
            xfer += iprot->readMapEnd();
          }
          isset_info_strings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->info_strings_display_order.clear();
            uint32_t _size204;
            ::apache::thrift::protocol::TType _etype207;
            xfer += iprot->readListBegin(_etype207, _size204);
            this->info_strings_display_order.resize(_size204);
            uint32_t _i208;
            for (_i208 = 0; _i208 < _size204; ++_i208)
            {
              xfer += iprot->readString(this->info_strings_display_order[_i208]);
            }
            xfer += iprot->readListEnd();
          }
          isset_info_strings_display_order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->child_counters_map.clear();
            uint32_t _size209;
            ::apache::thrift::protocol::TType _ktype210;
            ::apache::thrift::protocol::TType _vtype211;
            xfer += iprot->readMapBegin(_ktype210, _vtype211, _size209);
            uint32_t _i213;
            for (_i213 = 0; _i213 < _size209; ++_i213)
            {
              std::string _key214;
              xfer += iprot->readString(_key214);
              std::set<std::string> & _val215 = this->child_counters_map[_key214];
              {
                _val215.clear();
                uint32_t _size216;
                ::apache::thrift::protocol::TType _etype219;
                xfer += iprot->readSetBegin(_etype219, _size216);
                uint32_t _i220;
                for (_i220 = 0; _i220 < _size216; ++_i220)
                {
                  std::string _elem221;
                  xfer += iprot->readString(_elem221);
                  _val215.insert(_elem221);
                }
                xfer += iprot->readSetEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_child_counters_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->event_sequences.clear();
            uint32_t _size222;
            ::apache::thrift::protocol::TType _etype225;
            xfer += iprot->readListBegin(_etype225, _size222);
            this->event_sequences.resize(_size222);
            uint32_t _i226;
            for (_i226 = 0; _i226 < _size222; ++_i226)
            {
              xfer += this->event_sequences[_i226].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.event_sequences = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->time_series_counters.clear();
            uint32_t _size227;
            ::apache::thrift::protocol::TType _etype230;
            xfer += iprot->readListBegin(_etype230, _size227);
            this->time_series_counters.resize(_size227);
            uint32_t _i231;
            for (_i231 = 0; _i231 < _size227; ++_i231)
            {
              xfer += this->time_series_counters[_i231].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.time_series_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->summary_stats_counters.clear();
            uint32_t _size232;
            ::apache::thrift::protocol::TType _etype235;
            xfer += iprot->readListBegin(_etype235, _size232);
            this->summary_stats_counters.resize(_size232);
            uint32_t _i236;
            for (_i236 = 0; _i236 < _size232; ++_i236)
            {
              xfer += this->summary_stats_counters[_i236].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.summary_stats_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->node_metadata.read(iprot);
          this->__isset.node_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aggregated.read(iprot);
          this->__isset.aggregated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num_children)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_counters)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_metadata)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_indent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_info_strings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_info_strings_display_order)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_child_counters_map)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TRuntimeProfileNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TRuntimeProfileNode");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_children", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->num_children);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counters", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->counters.size()));
    std::vector<TCounter> ::const_iterator _iter237;
    for (_iter237 = this->counters.begin(); _iter237 != this->counters.end(); ++_iter237)
    {
      xfer += (*_iter237).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->metadata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("indent", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->indent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info_strings", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->info_strings.size()));
    std::map<std::string, std::string> ::const_iterator _iter238;
    for (_iter238 = this->info_strings.begin(); _iter238 != this->info_strings.end(); ++_iter238)
    {
      xfer += oprot->writeString(_iter238->first);
      xfer += oprot->writeString(_iter238->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info_strings_display_order", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->info_strings_display_order.size()));
    std::vector<std::string> ::const_iterator _iter239;
    for (_iter239 = this->info_strings_display_order.begin(); _iter239 != this->info_strings_display_order.end(); ++_iter239)
    {
      xfer += oprot->writeString((*_iter239));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("child_counters_map", ::apache::thrift::protocol::T_MAP, 8);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(this->child_counters_map.size()));
    std::map<std::string, std::set<std::string> > ::const_iterator _iter240;
    for (_iter240 = this->child_counters_map.begin(); _iter240 != this->child_counters_map.end(); ++_iter240)
    {
      xfer += oprot->writeString(_iter240->first);
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(_iter240->second.size()));
        std::set<std::string> ::const_iterator _iter241;
        for (_iter241 = _iter240->second.begin(); _iter241 != _iter240->second.end(); ++_iter241)
        {
          xfer += oprot->writeString((*_iter241));
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.event_sequences) {
    xfer += oprot->writeFieldBegin("event_sequences", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->event_sequences.size()));
      std::vector<TEventSequence> ::const_iterator _iter242;
      for (_iter242 = this->event_sequences.begin(); _iter242 != this->event_sequences.end(); ++_iter242)
      {
        xfer += (*_iter242).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.time_series_counters) {
    xfer += oprot->writeFieldBegin("time_series_counters", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->time_series_counters.size()));
      std::vector<TTimeSeriesCounter> ::const_iterator _iter243;
      for (_iter243 = this->time_series_counters.begin(); _iter243 != this->time_series_counters.end(); ++_iter243)
      {
        xfer += (*_iter243).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.summary_stats_counters) {
    xfer += oprot->writeFieldBegin("summary_stats_counters", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->summary_stats_counters.size()));
      std::vector<TSummaryStatsCounter> ::const_iterator _iter244;
      for (_iter244 = this->summary_stats_counters.begin(); _iter244 != this->summary_stats_counters.end(); ++_iter244)
      {
        xfer += (*_iter244).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.node_metadata) {
    xfer += oprot->writeFieldBegin("node_metadata", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->node_metadata.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.aggregated) {
    xfer += oprot->writeFieldBegin("aggregated", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->aggregated.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRuntimeProfileNode &a, TRuntimeProfileNode &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.num_children, b.num_children);
  swap(a.counters, b.counters);
  swap(a.metadata, b.metadata);
  swap(a.indent, b.indent);
  swap(a.info_strings, b.info_strings);
  swap(a.info_strings_display_order, b.info_strings_display_order);
  swap(a.child_counters_map, b.child_counters_map);
  swap(a.event_sequences, b.event_sequences);
  swap(a.time_series_counters, b.time_series_counters);
  swap(a.summary_stats_counters, b.summary_stats_counters);
  swap(a.node_metadata, b.node_metadata);
  swap(a.aggregated, b.aggregated);
  swap(a.__isset, b.__isset);
}

TRuntimeProfileNode::TRuntimeProfileNode(const TRuntimeProfileNode& other245) {
  name = other245.name;
  num_children = other245.num_children;
  counters = other245.counters;
  metadata = other245.metadata;
  indent = other245.indent;
  info_strings = other245.info_strings;
  info_strings_display_order = other245.info_strings_display_order;
  child_counters_map = other245.child_counters_map;
  event_sequences = other245.event_sequences;
  time_series_counters = other245.time_series_counters;
  summary_stats_counters = other245.summary_stats_counters;
  node_metadata = other245.node_metadata;
  aggregated = other245.aggregated;
  __isset = other245.__isset;
}
TRuntimeProfileNode& TRuntimeProfileNode::operator=(const TRuntimeProfileNode& other246) {
  name = other246.name;
  num_children = other246.num_children;
  counters = other246.counters;
  metadata = other246.metadata;
  indent = other246.indent;
  info_strings = other246.info_strings;
  info_strings_display_order = other246.info_strings_display_order;
  child_counters_map = other246.child_counters_map;
  event_sequences = other246.event_sequences;
  time_series_counters = other246.time_series_counters;
  summary_stats_counters = other246.summary_stats_counters;
  node_metadata = other246.node_metadata;
  aggregated = other246.aggregated;
  __isset = other246.__isset;
  return *this;
}
void TRuntimeProfileNode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRuntimeProfileNode(";
  out << "name=" << to_string(name);
  out << ", " << "num_children=" << to_string(num_children);
  out << ", " << "counters=" << to_string(counters);
  out << ", " << "metadata=" << to_string(metadata);
  out << ", " << "indent=" << to_string(indent);
  out << ", " << "info_strings=" << to_string(info_strings);
  out << ", " << "info_strings_display_order=" << to_string(info_strings_display_order);
  out << ", " << "child_counters_map=" << to_string(child_counters_map);
  out << ", " << "event_sequences="; (__isset.event_sequences ? (out << to_string(event_sequences)) : (out << "<null>"));
  out << ", " << "time_series_counters="; (__isset.time_series_counters ? (out << to_string(time_series_counters)) : (out << "<null>"));
  out << ", " << "summary_stats_counters="; (__isset.summary_stats_counters ? (out << to_string(summary_stats_counters)) : (out << "<null>"));
  out << ", " << "node_metadata="; (__isset.node_metadata ? (out << to_string(node_metadata)) : (out << "<null>"));
  out << ", " << "aggregated="; (__isset.aggregated ? (out << to_string(aggregated)) : (out << "<null>"));
  out << ")";
}


TRuntimeProfileTree::~TRuntimeProfileTree() noexcept {
}


void TRuntimeProfileTree::__set_nodes(const std::vector<TRuntimeProfileNode> & val) {
  this->nodes = val;
}

void TRuntimeProfileTree::__set_exec_summary(const  ::impala::TExecSummary& val) {
  this->exec_summary = val;
__isset.exec_summary = true;
}

void TRuntimeProfileTree::__set_profile_version(const int32_t val) {
  this->profile_version = val;
__isset.profile_version = true;
}
std::ostream& operator<<(std::ostream& out, const TRuntimeProfileTree& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TRuntimeProfileTree::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_nodes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size247;
            ::apache::thrift::protocol::TType _etype250;
            xfer += iprot->readListBegin(_etype250, _size247);
            this->nodes.resize(_size247);
            uint32_t _i251;
            for (_i251 = 0; _i251 < _size247; ++_i251)
            {
              xfer += this->nodes[_i251].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->exec_summary.read(iprot);
          this->__isset.exec_summary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->profile_version);
          this->__isset.profile_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_nodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TRuntimeProfileTree::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TRuntimeProfileTree");

  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->nodes.size()));
    std::vector<TRuntimeProfileNode> ::const_iterator _iter252;
    for (_iter252 = this->nodes.begin(); _iter252 != this->nodes.end(); ++_iter252)
    {
      xfer += (*_iter252).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.exec_summary) {
    xfer += oprot->writeFieldBegin("exec_summary", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->exec_summary.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.profile_version) {
    xfer += oprot->writeFieldBegin("profile_version", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->profile_version);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRuntimeProfileTree &a, TRuntimeProfileTree &b) {
  using ::std::swap;
  swap(a.nodes, b.nodes);
  swap(a.exec_summary, b.exec_summary);
  swap(a.profile_version, b.profile_version);
  swap(a.__isset, b.__isset);
}

TRuntimeProfileTree::TRuntimeProfileTree(const TRuntimeProfileTree& other253) {
  nodes = other253.nodes;
  exec_summary = other253.exec_summary;
  profile_version = other253.profile_version;
  __isset = other253.__isset;
}
TRuntimeProfileTree& TRuntimeProfileTree::operator=(const TRuntimeProfileTree& other254) {
  nodes = other254.nodes;
  exec_summary = other254.exec_summary;
  profile_version = other254.profile_version;
  __isset = other254.__isset;
  return *this;
}
void TRuntimeProfileTree::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRuntimeProfileTree(";
  out << "nodes=" << to_string(nodes);
  out << ", " << "exec_summary="; (__isset.exec_summary ? (out << to_string(exec_summary)) : (out << "<null>"));
  out << ", " << "profile_version="; (__isset.profile_version ? (out << to_string(profile_version)) : (out << "<null>"));
  out << ")";
}


TRuntimeProfileForest::~TRuntimeProfileForest() noexcept {
}


void TRuntimeProfileForest::__set_profile_trees(const std::vector<TRuntimeProfileTree> & val) {
  this->profile_trees = val;
}

void TRuntimeProfileForest::__set_host_profile(const TRuntimeProfileTree& val) {
  this->host_profile = val;
__isset.host_profile = true;
}
std::ostream& operator<<(std::ostream& out, const TRuntimeProfileForest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TRuntimeProfileForest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_profile_trees = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->profile_trees.clear();
            uint32_t _size255;
            ::apache::thrift::protocol::TType _etype258;
            xfer += iprot->readListBegin(_etype258, _size255);
            this->profile_trees.resize(_size255);
            uint32_t _i259;
            for (_i259 = 0; _i259 < _size255; ++_i259)
            {
              xfer += this->profile_trees[_i259].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_profile_trees = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->host_profile.read(iprot);
          this->__isset.host_profile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_profile_trees)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TRuntimeProfileForest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TRuntimeProfileForest");

  xfer += oprot->writeFieldBegin("profile_trees", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->profile_trees.size()));
    std::vector<TRuntimeProfileTree> ::const_iterator _iter260;
    for (_iter260 = this->profile_trees.begin(); _iter260 != this->profile_trees.end(); ++_iter260)
    {
      xfer += (*_iter260).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.host_profile) {
    xfer += oprot->writeFieldBegin("host_profile", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->host_profile.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRuntimeProfileForest &a, TRuntimeProfileForest &b) {
  using ::std::swap;
  swap(a.profile_trees, b.profile_trees);
  swap(a.host_profile, b.host_profile);
  swap(a.__isset, b.__isset);
}

TRuntimeProfileForest::TRuntimeProfileForest(const TRuntimeProfileForest& other261) {
  profile_trees = other261.profile_trees;
  host_profile = other261.host_profile;
  __isset = other261.__isset;
}
TRuntimeProfileForest& TRuntimeProfileForest::operator=(const TRuntimeProfileForest& other262) {
  profile_trees = other262.profile_trees;
  host_profile = other262.host_profile;
  __isset = other262.__isset;
  return *this;
}
void TRuntimeProfileForest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRuntimeProfileForest(";
  out << "profile_trees=" << to_string(profile_trees);
  out << ", " << "host_profile="; (__isset.host_profile ? (out << to_string(host_profile)) : (out << "<null>"));
  out << ")";
}

} // namespace
