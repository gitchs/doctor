#!./doctor
local io = require'io'
local missing = require'missing'
local impala = require'impala'
local iterators = require'iterators'
local optlib = require'optlib'
local define = optlib.define


define('--help', '-h', {nargs=0})
define('--avro_filename', '-f')
define('--query_id', '-q')



local libs = {}


function libs.view_profile(raw_profile)
  local ok, err, tree = impala.parse_profile(raw_profile)
  assert(ok and err == nil, 'failed to parse profile')
  local query_id = tree:query_id()
  local output_filename = query_id:gsub(':', '') .. '-debug.txt'
  print(output_filename)
  local raw = tree:debug()
  local fd <close> = io.open(output_filename, 'w')
  fd:write(raw)
end


local function valid_str(v)
  if type(v) ~= 'string' then
    return false
  end
  return v ~= ''
end


function main()
  if not missing.isatty(0) then
    libs.view_profile(io.stdin:read())
    return
  end


  optlib.parse(arg)
  local query_id = optlib.get'query_id'
  local avro_filename = optlib.get'avro_filename'
  if optlib.get('help') or not valid_str(query_id) or not valid_str(avro_filename) then
    print[[viewprofile -f AVRO_FILENAME -q QUERY_ID ]]
    return
  end
  for row in iterators.avro(avro_filename) do
    if row.query_id == query_id then
      libs.view_profile(row.profile)
      return
    end
  end
end


main()

